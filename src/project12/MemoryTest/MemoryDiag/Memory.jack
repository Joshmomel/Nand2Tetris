// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

  static Array ram, freeList;

  /** Initializes the class. */
  function void init() {
    var int len;

    let ram = 0;
    let freeList = 2048; // heapBase

    let freeList[0] = null; // next
    let freeList[1] = 14334; // length
    
    return;
  }

  /** Returns the RAM value at the given address. */
  function int peek(int address) {
    return ram[address];
  }

  /** Sets the RAM value at the given address to the given value. */
  function void poke(int address, int value) {
    let ram[address] = value;
    return;
  }

  /** Finds an available RAM block of the given size and returns
    *  a reference to its base address. */
    function int alloc(int size) {
      var int allocSize;
      var Array block;

      let allocSize = size + 2;

      if (freeList[1] > allocSize) {
          let freeList[1] = freeList[1] - allocSize;
          let block = freeList + 2 + freeList[1];
          let block[0] = null;
          let block[1] = size;
      } else {
          let block = Memory.firstFit(size);
      }

      // block
      return block + 2;
  }

  /** De-allocates the given object (cast as an array) by making
    *  it available for future allocations. */
    function void deAlloc(Array o) {
      var Array block, pre, next, temp;

      let block = o - 2;
      let pre = freeList;
      let next = freeList[0];

      while (~(next = null) & (next < block)) {
          let pre = next;
          let next = next[0];
      }

      let block[0] = null;
      let pre[0] = block;

      if ((block + block[1] + 2) = next) {
          let block[1] = block[1] + next[1] + 2;
          let block[0] = next[0];
      }

      if ((pre + pre[1] + 2) = block) {
          let pre[1] = pre[1] + block[1] + 2;
          let pre[0] = block[0];
      }
      return;
  }    
  

  function Array firstFit(int size) {
    var Array temp, block;
    
    let temp = freeList;

    while(temp[1] < size + 2) {
      // temp = next address
      let temp = temp[0];
    } 

    let temp[1] = temp[1] - size - 2;
    let block = temp + 2 + temp[1];
    let block[0] = null;
    let block[1] = size;

    return block;
  }
}
